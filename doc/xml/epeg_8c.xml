<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.7">
  <compounddef id="epeg_8c" kind="file">
    <compoundname>epeg.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="yes">Epeg.h</includes>
    <includes local="yes">epeg_private.h</includes>
    <incdepgraph>
      <node id="2">
        <label>stdlib.h</label>
      </node>
      <node id="4">
        <label>epeg_private.h</label>
      </node>
      <node id="0">
        <label>epeg.c</label>
        <link refid="epeg.c"/>
        <childnode refid="1" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>Epeg.h</label>
      </node>
      <node id="1">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="struct__Eet__Memfile__Write__Info" prot="public">_Eet_Memfile_Write_Info</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="epeg_8c_1a359255b849555840ffd0860f74b1370b" prot="public" static="no">
        <name>MIN</name>
        <param><defname>__x</defname></param>
        <param><defname>__y</defname></param>
        <initializer>((__x) &lt; (__y) ? (__x) : (__y))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/epeg/epeg.c" line="98" column="9" bodyfile="/Users/ericgallager/epeg/epeg.c" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="epeg_8c_1af10c259c53d5fb4a67591734c7c6d3db" prot="public" static="no">
        <name>MAX</name>
        <param><defname>__x</defname></param>
        <param><defname>__y</defname></param>
        <initializer>((__x) &gt; (__y) ? (__x) : (__y))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/epeg/epeg.c" line="99" column="9" bodyfile="/Users/ericgallager/epeg/epeg.c" bodystart="99" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="epeg_8c_1aa03171b6ccd3d8001d991640ab9fce68" prot="public" static="no">
        <type>struct _Eet_Memfile_Write_Info</type>
        <definition>typedef struct _Eet_Memfile_Write_Info Eet_Memfile_Write_Info</definition>
        <argsstring></argsstring>
        <name>Eet_Memfile_Write_Info</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/epeg/epeg.c" line="1248" column="1" bodyfile="/Users/ericgallager/epeg/epeg.c" bodystart="1258" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="epeg_8c_1a541c1a50a8f0be3111f02e08c5cd6b87" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int _epeg_memfile_info_alloc_num</definition>
        <argsstring></argsstring>
        <name>_epeg_memfile_info_alloc_num</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/epeg/epeg.c" line="1266" column="1" bodyfile="/Users/ericgallager/epeg/epeg.c" bodystart="1266" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="epeg_8c_1a846dccee6ef74e7b2affd8ebd9fb48cd" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int _epeg_memfile_info_num</definition>
        <argsstring></argsstring>
        <name>_epeg_memfile_info_num</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/epeg/epeg.c" line="1267" column="1" bodyfile="/Users/ericgallager/epeg/epeg.c" bodystart="1267" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="epeg_8c_1a76214c0162ff781925af95f2f3be15e2" prot="public" static="yes" mutable="no">
        <type>Eet_Memfile_Write_Info *</type>
        <definition>Eet_Memfile_Write_Info* _epeg_memfile_info</definition>
        <argsstring></argsstring>
        <name>_epeg_memfile_info</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/epeg/epeg.c" line="1268" column="1" bodyfile="/Users/ericgallager/epeg/epeg.c" bodystart="1268" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="epeg_8c_1acf535fd90db7bcf1a82dbe15a50c2a8a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Epeg_Image *</type>
        <definition>static Epeg_Image * _epeg_open_header</definition>
        <argsstring>(Epeg_Image *im)</argsstring>
        <name>_epeg_open_header</name>
        <param>
          <type>Epeg_Image *</type>
          <declname>im</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/epeg/epeg.c" line="89" column="1" bodyfile="/Users/ericgallager/epeg/epeg.c" bodystart="841" bodyend="918"/>
      </memberdef>
      <memberdef kind="function" id="epeg_8c_1a34d52540e579ae654881d3be16d19cef" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int _epeg_decode</definition>
        <argsstring>(Epeg_Image *im)</argsstring>
        <name>_epeg_decode</name>
        <param>
          <type>Epeg_Image *</type>
          <declname>im</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/epeg/epeg.c" line="90" column="1" bodyfile="/Users/ericgallager/epeg/epeg.c" bodystart="921" bodyend="1005"/>
      </memberdef>
      <memberdef kind="function" id="epeg_8c_1ab0adef2394722a2cc7bdd33ec06ae42e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int _epeg_scale</definition>
        <argsstring>(Epeg_Image *im)</argsstring>
        <name>_epeg_scale</name>
        <param>
          <type>Epeg_Image *</type>
          <declname>im</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/epeg/epeg.c" line="91" column="1" bodyfile="/Users/ericgallager/epeg/epeg.c" bodystart="1008" bodyend="1035"/>
      </memberdef>
      <memberdef kind="function" id="epeg_8c_1ae8695051f772eab34219a680b8e1dd8f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int _epeg_decode_for_trim</definition>
        <argsstring>(Epeg_Image *im)</argsstring>
        <name>_epeg_decode_for_trim</name>
        <param>
          <type>Epeg_Image *</type>
          <declname>im</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/epeg/epeg.c" line="92" column="1" bodyfile="/Users/ericgallager/epeg/epeg.c" bodystart="1038" bodyend="1110"/>
      </memberdef>
      <memberdef kind="function" id="epeg_8c_1a0c0ab083531f6313b9ed79b0c1e0fa74" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int _epeg_trim</definition>
        <argsstring>(Epeg_Image *im)</argsstring>
        <name>_epeg_trim</name>
        <param>
          <type>Epeg_Image *</type>
          <declname>im</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/epeg/epeg.c" line="93" column="1" bodyfile="/Users/ericgallager/epeg/epeg.c" bodystart="1113" bodyend="1130"/>
      </memberdef>
      <memberdef kind="function" id="epeg_8c_1a30a4e820dc4a083dcb7e6dad777f6d6b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int _epeg_encode</definition>
        <argsstring>(Epeg_Image *im)</argsstring>
        <name>_epeg_encode</name>
        <param>
          <type>Epeg_Image *</type>
          <declname>im</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/epeg/epeg.c" line="94" column="1" bodyfile="/Users/ericgallager/epeg/epeg.c" bodystart="1133" bodyend="1217"/>
      </memberdef>
      <memberdef kind="function" id="epeg_8c_1a15f7830f31f23ee1ba5d86e1ec4f5b52" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void _epeg_fatal_error_handler</definition>
        <argsstring>(j_common_ptr cinfo)</argsstring>
        <name>_epeg_fatal_error_handler</name>
        <param>
          <type>j_common_ptr</type>
          <declname>cinfo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/epeg/epeg.c" line="96" column="1" bodyfile="/Users/ericgallager/epeg/epeg.c" bodystart="1220" bodyend="1227"/>
      </memberdef>
      <memberdef kind="function" id="epeg_8c_1ac046eceb33af487e670a6b18d15ccae7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Epeg_Image *</type>
        <definition>Epeg_Image* epeg_file_open</definition>
        <argsstring>(const char *file)</argsstring>
        <name>epeg_file_open</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>Open a JPEG image by filename. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>The file path to open. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A handle to the opened JPEG file, with the header decoded.</para></simplesect>
This function opens the file indicated by the <computeroutput>file</computeroutput> parameter, and attempts to decode it as a jpeg file. If this failes, NULL is returned. Otherwise a valid handle to an open JPEG file is returned that can be used by other Epeg calls.</para><para>The <computeroutput>file</computeroutput> must be a pointer to a valid C string, NUL (0 byte) terminated thats is a relative or absolute file path. If not results are not determined.</para><para>See also: <ref refid="epeg_8c_1a9df9756f2e34e67701e7d88bcb43fd16" kindref="member">epeg_memory_open()</ref>, <ref refid="epeg_8c_1a8faf0f0fab47ac97b86ee7e00e1bee7c" kindref="member">epeg_close()</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/epeg/epeg.c" line="118" column="1" bodyfile="/Users/ericgallager/epeg/epeg.c" bodystart="118" bodyend="133"/>
        <references refid="epeg_8c_1a8faf0f0fab47ac97b86ee7e00e1bee7c" compoundref="epeg_8c" startline="823" endline="838">epeg_close</references>
      </memberdef>
      <memberdef kind="function" id="epeg_8c_1a9df9756f2e34e67701e7d88bcb43fd16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Epeg_Image *</type>
        <definition>Epeg_Image* epeg_memory_open</definition>
        <argsstring>(unsigned char *data, int size)</argsstring>
        <name>epeg_memory_open</name>
        <param>
          <type>unsigned char *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Open a JPEG image stored in memory. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the memory containing the JPEG data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the memory segment containing the JPEG. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A handle to the opened JPEG, with the header decoded.</para></simplesect>
This function opens a JPEG file that is stored in memory pointed to by <computeroutput>data</computeroutput>, and that is <computeroutput>size</computeroutput> bytes in size. If successful a valid handle is returned, or on failure NULL is returned.</para><para>See also: <ref refid="epeg_8c_1ac046eceb33af487e670a6b18d15ccae7" kindref="member">epeg_file_open()</ref>, <ref refid="epeg_8c_1a8faf0f0fab47ac97b86ee7e00e1bee7c" kindref="member">epeg_close()</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/epeg/epeg.c" line="148" column="1" bodyfile="/Users/ericgallager/epeg/epeg.c" bodystart="148" bodyend="161"/>
        <references refid="epeg_8c_1a8faf0f0fab47ac97b86ee7e00e1bee7c" compoundref="epeg_8c" startline="823" endline="838">epeg_close</references>
      </memberdef>
      <memberdef kind="function" id="epeg_8c_1a3b8680bdbf470d1a634618e5308ce147" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void epeg_size_get</definition>
        <argsstring>(Epeg_Image *im, int *w, int *h)</argsstring>
        <name>epeg_size_get</name>
        <param>
          <type>Epeg_Image *</type>
          <declname>im</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>h</declname>
        </param>
        <briefdescription>
<para>Return the original JPEG pixel size. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>im</parametername>
</parameternamelist>
<parameterdescription>
<para>A handle to an opened Epeg image. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the width value in pixels to be filled in. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the height value in pixels to be filled in.</para></parameterdescription>
</parameteritem>
</parameterlist>
Returns the image size in pixels. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/epeg/epeg.c" line="173" column="1" bodyfile="/Users/ericgallager/epeg/epeg.c" bodystart="173" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="epeg_8c_1a290a722dddc53761d213524ce0e89284" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void epeg_colorspace_get</definition>
        <argsstring>(Epeg_Image *im, int *space)</argsstring>
        <name>epeg_colorspace_get</name>
        <param>
          <type>Epeg_Image *</type>
          <declname>im</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>space</declname>
        </param>
        <briefdescription>
<para>Return the original JPEG pixel color space. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>im</parametername>
</parameternamelist>
<parameterdescription>
<para>A handle to an opened Epeg image. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>space</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the color space value to be filled in.</para></parameterdescription>
</parameteritem>
</parameterlist>
Returns the image color space. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/epeg/epeg.c" line="188" column="1" bodyfile="/Users/ericgallager/epeg/epeg.c" bodystart="188" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="epeg_8c_1a800dc04316740427b1f4366d973ff4e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void epeg_decode_size_set</definition>
        <argsstring>(Epeg_Image *im, int w, int h)</argsstring>
        <name>epeg_decode_size_set</name>
        <param>
          <type>Epeg_Image *</type>
          <declname>im</declname>
        </param>
        <param>
          <type>int</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>h</declname>
        </param>
        <briefdescription>
<para>Set the size of the image to decode in pixels. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>im</parametername>
</parameternamelist>
<parameterdescription>
<para>A handle to an opened Epeg image. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The width of the image to decode at, in pixels. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>The height of the image to decode at, in pixels.</para></parameterdescription>
</parameteritem>
</parameterlist>
Sets the size at which to deocode the JPEG image, giving an optimised load that only decodes the pixels needed. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/epeg/epeg.c" line="204" column="1" bodyfile="/Users/ericgallager/epeg/epeg.c" bodystart="204" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="epeg_8c_1ab840f7b7ea8c21938a5210dee06e9dda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void epeg_decode_bounds_set</definition>
        <argsstring>(Epeg_Image *im, int x, int y, int w, int h)</argsstring>
        <name>epeg_decode_bounds_set</name>
        <param>
          <type>Epeg_Image *</type>
          <declname>im</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/epeg/epeg.c" line="218" column="1" bodyfile="/Users/ericgallager/epeg/epeg.c" bodystart="218" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="epeg_8c_1afe41e06c6667542ad4685730538e03f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void epeg_decode_colorspace_set</definition>
        <argsstring>(Epeg_Image *im, Epeg_Colorspace colorspace)</argsstring>
        <name>epeg_decode_colorspace_set</name>
        <param>
          <type>Epeg_Image *</type>
          <declname>im</declname>
        </param>
        <param>
          <type>Epeg_Colorspace</type>
          <declname>colorspace</declname>
        </param>
        <briefdescription>
<para>Set the colorspace in which to decode the image. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>im</parametername>
</parameternamelist>
<parameterdescription>
<para>A handle to an opened Epeg image. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>colorspace</parametername>
</parameternamelist>
<parameterdescription>
<para>The colorspace to decode the image in.</para></parameterdescription>
</parameteritem>
</parameterlist>
This sets the colorspace to decode the image in. The default is EPEG_YUV8, as this is normally the native colorspace of a JPEG file, avoiding any colorspace conversions for a faster load and/or save. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/epeg/epeg.c" line="243" column="1" bodyfile="/Users/ericgallager/epeg/epeg.c" bodystart="243" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="epeg_8c_1aa3e359181a6a48bd84708828364bf094" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const void *</type>
        <definition>const void* epeg_pixels_get</definition>
        <argsstring>(Epeg_Image *im, int x, int y, int w, int h)</argsstring>
        <name>epeg_pixels_get</name>
        <param>
          <type>Epeg_Image *</type>
          <declname>im</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>h</declname>
        </param>
        <briefdescription>
<para>Get a segment of decoded pixels from an image. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>im</parametername>
</parameternamelist>
<parameterdescription>
<para>A handle to an opened Epeg image. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Rectangle X. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Rectangle Y. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>Rectangle width. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>Rectangle height. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the top left of the requested pixel block.</para></simplesect>
Return image pixels in the decoded format from the specified location rectangle bounded with the box <computeroutput>x</computeroutput>, <computeroutput>y</computeroutput> <computeroutput>w</computeroutput> X <computeroutput>y</computeroutput>. The pixel block is packed with no row padding, and it organsied from top-left to bottom right, row by row. You must free the pixel block using <ref refid="epeg_8c_1adf9efc5d877afebda99aba8d5c2bbb0f" kindref="member">epeg_pixels_free()</ref> before you close the image handle, and assume the pixels to be read-only memory.</para><para>On success the pointer is returned, on failure, NULL is returned. Failure may be because the rectangle is out of the bounds of the image, memory allocations failed or the image data cannot be decoded. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/epeg/epeg.c" line="271" column="1" bodyfile="/Users/ericgallager/epeg/epeg.c" bodystart="271" bodyend="493"/>
      </memberdef>
      <memberdef kind="function" id="epeg_8c_1a2dee06509f945c8e56efe30975e77806" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const void *</type>
        <definition>const void* epeg_pixels_get_as_RGB8</definition>
        <argsstring>(Epeg_Image *im, int x, int y, int w, int h)</argsstring>
        <name>epeg_pixels_get_as_RGB8</name>
        <param>
          <type>Epeg_Image *</type>
          <declname>im</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>h</declname>
        </param>
        <briefdescription>
<para>Get a segment of decoded pixels from an image. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>im</parametername>
</parameternamelist>
<parameterdescription>
<para>A handle to an opened Epeg image. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Rectangle X. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Rectangle Y. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>Rectangle width. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>Rectangle height. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the top left of the requested pixel block.</para></simplesect>
Return image pixels in the decoded format from the specified location rectangle bounded with the box <computeroutput>x</computeroutput>, <computeroutput>y</computeroutput> <computeroutput>w</computeroutput> X <computeroutput>y</computeroutput>. The pixel block is packed with no row padding, and it organsied from top-left to bottom right, row by row. You must free the pixel block using <ref refid="epeg_8c_1adf9efc5d877afebda99aba8d5c2bbb0f" kindref="member">epeg_pixels_free()</ref> before you close the image handle, and assume the pixels to be read-only memory.</para><para>On success the pointer is returned, on failure, NULL is returned. Failure may be because the rectangle is out of the bounds of the image, memory allocations failed or the image data cannot be decoded. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/epeg/epeg.c" line="516" column="1" bodyfile="/Users/ericgallager/epeg/epeg.c" bodystart="516" bodyend="624"/>
      </memberdef>
      <memberdef kind="function" id="epeg_8c_1adf9efc5d877afebda99aba8d5c2bbb0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void epeg_pixels_free</definition>
        <argsstring>(Epeg_Image *im, const void *data)</argsstring>
        <name>epeg_pixels_free</name>
        <param>
          <type>Epeg_Image *</type>
          <declname>im</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Free requested pixel block from an image. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>im</parametername>
</parameternamelist>
<parameterdescription>
<para>A handle to an opened Epeg image. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to the image pixels.</para></parameterdescription>
</parameteritem>
</parameterlist>
This frees the data for a block of pixels requested from image <computeroutput>im</computeroutput>. <computeroutput>data</computeroutput> must be a valid (non NULL) pointer to a pixel block taken from the image <computeroutput>im</computeroutput> by <ref refid="epeg_8c_1aa3e359181a6a48bd84708828364bf094" kindref="member">epeg_pixels_get()</ref> and mustbe called before the image is closed by <ref refid="epeg_8c_1a8faf0f0fab47ac97b86ee7e00e1bee7c" kindref="member">epeg_close()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/epeg/epeg.c" line="637" column="1" bodyfile="/Users/ericgallager/epeg/epeg.c" bodystart="637" bodyend="640"/>
      </memberdef>
      <memberdef kind="function" id="epeg_8c_1ab4aea6482399797f2f4ada02e9962b7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* epeg_comment_get</definition>
        <argsstring>(Epeg_Image *im)</argsstring>
        <name>epeg_comment_get</name>
        <param>
          <type>Epeg_Image *</type>
          <declname>im</declname>
        </param>
        <briefdescription>
<para>Get the image comment field as a string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>im</parametername>
</parameternamelist>
<parameterdescription>
<para>A handle to an opened Epeg image. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the loaded image comments.</para></simplesect>
This function returns the comment field as a string (NUL byte terminated) of the loaded image <computeroutput>im</computeroutput>, if there is a comment, or NULL if no comment is saved with the image. Consider the string returned to be read-only. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/epeg/epeg.c" line="653" column="1" bodyfile="/Users/ericgallager/epeg/epeg.c" bodystart="653" bodyend="656"/>
      </memberdef>
      <memberdef kind="function" id="epeg_8c_1a28e230b7b3bb05b8a470c80c45100c52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void epeg_thumbnail_comments_get</definition>
        <argsstring>(Epeg_Image *im, Epeg_Thumbnail_Info *info)</argsstring>
        <name>epeg_thumbnail_comments_get</name>
        <param>
          <type>Epeg_Image *</type>
          <declname>im</declname>
        </param>
        <param>
          <type>Epeg_Thumbnail_Info *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>Get thumbnail comments of loaded image. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>im</parametername>
</parameternamelist>
<parameterdescription>
<para>A handle to an opened Epeg image. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a thumbnail info struct to be filled in.</para></parameterdescription>
</parameteritem>
</parameterlist>
This function retrieves thumbnail comments written by Epeg to any saved JPEG files. If no thumbnail comments were saved, the fields will be 0 in the <computeroutput>info</computeroutput> struct on return. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/epeg/epeg.c" line="669" column="1" bodyfile="/Users/ericgallager/epeg/epeg.c" bodystart="669" bodyend="677"/>
      </memberdef>
      <memberdef kind="function" id="epeg_8c_1ab96605b1c21ec8d791df705a5117233c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void epeg_comment_set</definition>
        <argsstring>(Epeg_Image *im, const char *comment)</argsstring>
        <name>epeg_comment_set</name>
        <param>
          <type>Epeg_Image *</type>
          <declname>im</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>comment</declname>
        </param>
        <briefdescription>
<para>Set the comment field of the image for saving. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>im</parametername>
</parameternamelist>
<parameterdescription>
<para>A handle to an opened Epeg image. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comment</parametername>
</parameternamelist>
<parameterdescription>
<para>The comment to set.</para></parameterdescription>
</parameteritem>
</parameterlist>
Set the comment for the image file for when it gets saved. This is a NUL byte terminated C string. If <computeroutput>comment</computeroutput> is NULL the output file will have no comment field.</para><para>The default comment will be any comment loaded from the input file. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/epeg/epeg.c" line="692" column="1" bodyfile="/Users/ericgallager/epeg/epeg.c" bodystart="692" bodyend="697"/>
      </memberdef>
      <memberdef kind="function" id="epeg_8c_1ad0c11f61561f622ca4097c47c75129bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void epeg_quality_set</definition>
        <argsstring>(Epeg_Image *im, int quality)</argsstring>
        <name>epeg_quality_set</name>
        <param>
          <type>Epeg_Image *</type>
          <declname>im</declname>
        </param>
        <param>
          <type>int</type>
          <declname>quality</declname>
        </param>
        <briefdescription>
<para>Set the encoding quality of the saved image. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>im</parametername>
</parameternamelist>
<parameterdescription>
<para>A handle to an opened Epeg image. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>quality</parametername>
</parameternamelist>
<parameterdescription>
<para>The quality of encoding from 0 to 100.</para></parameterdescription>
</parameteritem>
</parameterlist>
Set the quality of the output encoded image. Values from 0 to 100 inclusive are valid, with 100 being the maximum quality, and 0 being the minimum. If the quality is set equal to or above 90%, the output U and V color planes are encoded at 1:1 with the Y plane.</para><para>The default quality is 75. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/epeg/epeg.c" line="713" column="1" bodyfile="/Users/ericgallager/epeg/epeg.c" bodystart="713" bodyend="718"/>
      </memberdef>
      <memberdef kind="function" id="epeg_8c_1a5cfe689f77dbe7b120317a195585ee51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void epeg_thumbnail_comments_enable</definition>
        <argsstring>(Epeg_Image *im, int onoff)</argsstring>
        <name>epeg_thumbnail_comments_enable</name>
        <param>
          <type>Epeg_Image *</type>
          <declname>im</declname>
        </param>
        <param>
          <type>int</type>
          <declname>onoff</declname>
        </param>
        <briefdescription>
<para>Enable thumbnail comments in saved image. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>im</parametername>
</parameternamelist>
<parameterdescription>
<para>A handle to an opened Epeg image. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>onoff</parametername>
</parameternamelist>
<parameterdescription>
<para>A boolean on and off enabling flag.</para></parameterdescription>
</parameteritem>
</parameterlist>
if <computeroutput>onoff</computeroutput> is 1, the output file will have thumbnail comments added to it, and if it is 0, it will not. The default is 0. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/epeg/epeg.c" line="730" column="1" bodyfile="/Users/ericgallager/epeg/epeg.c" bodystart="730" bodyend="733"/>
      </memberdef>
      <memberdef kind="function" id="epeg_8c_1a4aa4c7bbf3edf1f24603d3b4dad684b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void epeg_file_output_set</definition>
        <argsstring>(Epeg_Image *im, const char *file)</argsstring>
        <name>epeg_file_output_set</name>
        <param>
          <type>Epeg_Image *</type>
          <declname>im</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>Set the output file path for the image when saved. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>im</parametername>
</parameternamelist>
<parameterdescription>
<para>A handle to an opened Epeg image. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to the output file.</para></parameterdescription>
</parameteritem>
</parameterlist>
This sets the output file path name (either a full or relative path name) to where the file will be written when saved. <computeroutput>file</computeroutput> must be a NUL terminated C string conatining the path to the file to be saved to. If it is NULL, the image will not be saved to a file when calling <ref refid="epeg_8c_1a12a018084510ebdc0e627f56305fea79" kindref="member">epeg_encode()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/epeg/epeg.c" line="746" column="1" bodyfile="/Users/ericgallager/epeg/epeg.c" bodystart="746" bodyend="751"/>
      </memberdef>
      <memberdef kind="function" id="epeg_8c_1ae0e91c160074e6d96b7e366fb0eb6ec8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void epeg_memory_output_set</definition>
        <argsstring>(Epeg_Image *im, unsigned char **data, int *size)</argsstring>
        <name>epeg_memory_output_set</name>
        <param>
          <type>Epeg_Image *</type>
          <declname>im</declname>
        </param>
        <param>
          <type>unsigned char **</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Set the output file to be a block of allocated memory. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>im</parametername>
</parameternamelist>
<parameterdescription>
<para>A handle to an opened Epeg image. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a pointer to a memory block. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a counter of the size of the memory block.</para></parameterdescription>
</parameteritem>
</parameterlist>
This sets the output encoding of the image when saved to be allocated memory. After <ref refid="epeg_8c_1a8faf0f0fab47ac97b86ee7e00e1bee7c" kindref="member">epeg_close()</ref> is called the pointer pointed to by <computeroutput>data</computeroutput> and the integer pointed to by <computeroutput>size</computeroutput> will contain the pointer to the memory block and its size in bytes, respecitvely. The memory block can be freed with the free() function call. If the save fails the pointer to the memory block will be unaffected, as will the size. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/epeg/epeg.c" line="768" column="1" bodyfile="/Users/ericgallager/epeg/epeg.c" bodystart="768" bodyend="772"/>
      </memberdef>
      <memberdef kind="function" id="epeg_8c_1a12a018084510ebdc0e627f56305fea79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int epeg_encode</definition>
        <argsstring>(Epeg_Image *im)</argsstring>
        <name>epeg_encode</name>
        <param>
          <type>Epeg_Image *</type>
          <declname>im</declname>
        </param>
        <briefdescription>
<para>This saves the image to its specified destination. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>im</parametername>
</parameternamelist>
<parameterdescription>
<para>A handle to an opened Epeg image.</para></parameterdescription>
</parameteritem>
</parameterlist>
This saves the image <computeroutput>im</computeroutput> to its destination specified by <ref refid="epeg_8c_1a4aa4c7bbf3edf1f24603d3b4dad684b4" kindref="member">epeg_file_output_set()</ref> or <ref refid="epeg_8c_1ae0e91c160074e6d96b7e366fb0eb6ec8" kindref="member">epeg_memory_output_set()</ref>. The image will be encoded at the deoded pixel size, using the quality, comment and thumbnail comment settings set on the image. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/epeg/epeg.c" line="784" column="1" bodyfile="/Users/ericgallager/epeg/epeg.c" bodystart="784" bodyend="793"/>
      </memberdef>
      <memberdef kind="function" id="epeg_8c_1a327dab144744ba5f1892643d627e6df0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int epeg_trim</definition>
        <argsstring>(Epeg_Image *im)</argsstring>
        <name>epeg_trim</name>
        <param>
          <type>Epeg_Image *</type>
          <declname>im</declname>
        </param>
        <briefdescription>
<para>FIXME: Document this. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>im</parametername>
</parameternamelist>
<parameterdescription>
<para>A handle to an opened Epeg image.</para></parameterdescription>
</parameteritem>
</parameterlist>
FIXME: Document this. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/epeg/epeg.c" line="802" column="1" bodyfile="/Users/ericgallager/epeg/epeg.c" bodystart="802" bodyend="811"/>
      </memberdef>
      <memberdef kind="function" id="epeg_8c_1a8faf0f0fab47ac97b86ee7e00e1bee7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void epeg_close</definition>
        <argsstring>(Epeg_Image *im)</argsstring>
        <name>epeg_close</name>
        <param>
          <type>Epeg_Image *</type>
          <declname>im</declname>
        </param>
        <briefdescription>
<para>Close an image handle. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>im</parametername>
</parameternamelist>
<parameterdescription>
<para>A handle to an opened Epeg image.</para></parameterdescription>
</parameteritem>
</parameterlist>
This closes an opened image handle and frees all memory associated with it. It does not free encoded data generated by <ref refid="epeg_8c_1ae0e91c160074e6d96b7e366fb0eb6ec8" kindref="member">epeg_memory_output_set()</ref> followed by <ref refid="epeg_8c_1a12a018084510ebdc0e627f56305fea79" kindref="member">epeg_encode()</ref> nor does it guarantee to free any data recieved by <ref refid="epeg_8c_1aa3e359181a6a48bd84708828364bf094" kindref="member">epeg_pixels_get()</ref>. Once an image handle is closed consider it invalid. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/epeg/epeg.c" line="823" column="1" bodyfile="/Users/ericgallager/epeg/epeg.c" bodystart="823" bodyend="838"/>
        <referencedby refid="epeg_8c_1ac046eceb33af487e670a6b18d15ccae7" compoundref="epeg_8c" startline="118" endline="133">epeg_file_open</referencedby>
        <referencedby refid="epeg_8c_1a9df9756f2e34e67701e7d88bcb43fd16" compoundref="epeg_8c" startline="148" endline="161">epeg_memory_open</referencedby>
      </memberdef>
      <memberdef kind="function" id="epeg_8c_1a81c3337c4b13ae443e5666625e55eec5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FILE *</type>
        <definition>FILE* _epeg_memfile_read_open</definition>
        <argsstring>(void *data, size_t size)</argsstring>
        <name>_epeg_memfile_read_open</name>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/epeg/epeg.c" line="1232" column="1" bodyfile="/Users/ericgallager/epeg/epeg.c" bodystart="1232" bodyend="1245"/>
      </memberdef>
      <memberdef kind="function" id="epeg_8c_1a801d6fb607e27d00017db7bfc6c7f212" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _epeg_memfile_read_close</definition>
        <argsstring>(FILE *f)</argsstring>
        <name>_epeg_memfile_read_close</name>
        <param>
          <type>FILE *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/epeg/epeg.c" line="1248" column="1" bodyfile="/Users/ericgallager/epeg/epeg.c" bodystart="1248" bodyend="1255"/>
      </memberdef>
      <memberdef kind="function" id="epeg_8c_1a04551cf55da2a78566c25cee433fc7bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FILE *</type>
        <definition>FILE* _epeg_memfile_write_open</definition>
        <argsstring>(void **data, size_t *size)</argsstring>
        <name>_epeg_memfile_write_open</name>
        <param>
          <type>void **</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/epeg/epeg.c" line="1271" column="1" bodyfile="/Users/ericgallager/epeg/epeg.c" bodystart="1271" bodyend="1306"/>
      </memberdef>
      <memberdef kind="function" id="epeg_8c_1ad794241cb0e85dc676c5fe8ad0fb0de3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _epeg_memfile_write_close</definition>
        <argsstring>(FILE *f)</argsstring>
        <name>_epeg_memfile_write_close</name>
        <param>
          <type>FILE *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/epeg/epeg.c" line="1309" column="1" bodyfile="/Users/ericgallager/epeg/epeg.c" bodystart="1309" bodyend="1342"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Epeg JPEG Thumbnailer library. </para>    </briefdescription>
    <detaileddescription>
<para>These routines are used for the Epeg library. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="84"><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Epeg.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;epeg_private.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Epeg_Image<sp/><sp/><sp/>*_epeg_open_header<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Epeg_Image<sp/>*im);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_epeg_decode<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Epeg_Image<sp/>*im);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_epeg_scale<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Epeg_Image<sp/>*im);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_epeg_decode_for_trim<sp/><sp/><sp/><sp/><sp/>(Epeg_Image<sp/>*im);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_epeg_trim<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Epeg_Image<sp/>*im);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_epeg_encode<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Epeg_Image<sp/>*im);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_epeg_fatal_error_handler<sp/>(j_common_ptr<sp/>cinfo);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MIN(__x,__y)<sp/>((__x)<sp/>&lt;<sp/>(__y)<sp/>?<sp/>(__x)<sp/>:<sp/>(__y))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX(__x,__y)<sp/>((__x)<sp/>&gt;<sp/>(__y)<sp/>?<sp/>(__x)<sp/>:<sp/>(__y))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal">Epeg_Image<sp/>*</highlight></codeline>
<codeline lineno="118" refid="epeg_8c_1ac046eceb33af487e670a6b18d15ccae7" refkind="member"><highlight class="normal"><ref refid="epeg_8c_1ac046eceb33af487e670a6b18d15ccae7" kindref="member">epeg_file_open</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file)</highlight></codeline>
<codeline lineno="119"><highlight class="normal">{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/>Epeg_Image<sp/>*im;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/>im<sp/>=<sp/>calloc(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Epeg_Image));</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/>im-&gt;in.file<sp/>=<sp/>strdup(file);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/>im-&gt;in.f<sp/>=<sp/>fopen(im-&gt;in.file,<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!im-&gt;in.f)</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><ref refid="epeg_8c_1a8faf0f0fab47ac97b86ee7e00e1bee7c" kindref="member">epeg_close</ref>(im);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/>fstat(fileno(im-&gt;in.f),<sp/>&amp;(im-&gt;stat_info));</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/>im-&gt;out.quality<sp/>=<sp/>75;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_epeg_open_header(im);</highlight></codeline>
<codeline lineno="133"><highlight class="normal">}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal">Epeg_Image<sp/>*</highlight></codeline>
<codeline lineno="148" refid="epeg_8c_1a9df9756f2e34e67701e7d88bcb43fd16" refkind="member"><highlight class="normal"><ref refid="epeg_8c_1a9df9756f2e34e67701e7d88bcb43fd16" kindref="member">epeg_memory_open</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size)</highlight></codeline>
<codeline lineno="149"><highlight class="normal">{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/>Epeg_Image<sp/>*im;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/>im<sp/>=<sp/>calloc(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Epeg_Image));</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/>im-&gt;in.f<sp/>=<sp/>_epeg_memfile_read_open(data,<sp/>size);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!im-&gt;in.f)</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><ref refid="epeg_8c_1a8faf0f0fab47ac97b86ee7e00e1bee7c" kindref="member">epeg_close</ref>(im);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/>im-&gt;out.quality<sp/>=<sp/>75;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_epeg_open_header(im);</highlight></codeline>
<codeline lineno="161"><highlight class="normal">}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173" refid="epeg_8c_1a3b8680bdbf470d1a634618e5308ce147" refkind="member"><highlight class="normal"><ref refid="epeg_8c_1a3b8680bdbf470d1a634618e5308ce147" kindref="member">epeg_size_get</ref>(Epeg_Image<sp/>*im,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*h)</highlight></codeline>
<codeline lineno="174"><highlight class="normal">{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(w)<sp/>*w<sp/>=<sp/>im-&gt;in.w;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h)<sp/>*h<sp/>=<sp/>im-&gt;in.h;</highlight></codeline>
<codeline lineno="177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188" refid="epeg_8c_1a290a722dddc53761d213524ce0e89284" refkind="member"><highlight class="normal"><ref refid="epeg_8c_1a290a722dddc53761d213524ce0e89284" kindref="member">epeg_colorspace_get</ref>(Epeg_Image<sp/>*im,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*space)</highlight></codeline>
<codeline lineno="189"><highlight class="normal">{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(space)<sp/>*space<sp/>=<sp/>im-&gt;color_space;</highlight></codeline>
<codeline lineno="191"><highlight class="normal">}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204" refid="epeg_8c_1a800dc04316740427b1f4366d973ff4e4" refkind="member"><highlight class="normal"><ref refid="epeg_8c_1a800dc04316740427b1f4366d973ff4e4" kindref="member">epeg_decode_size_set</ref>(Epeg_Image<sp/>*im,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h)</highlight></codeline>
<codeline lineno="205"><highlight class="normal">{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(im-&gt;pixels)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(w<sp/>&lt;<sp/>1)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(w<sp/>&gt;<sp/>im-&gt;in.w)<sp/>w<sp/>=<sp/>im-&gt;in.w;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(h<sp/>&lt;<sp/>1)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h<sp/>&gt;<sp/>im-&gt;in.h)<sp/>h<sp/>=<sp/>im-&gt;in.h;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/>im-&gt;out.w<sp/>=<sp/>w;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/>im-&gt;out.h<sp/>=<sp/>h;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/>im-&gt;out.x<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/>im-&gt;out.y<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="215"><highlight class="normal">}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal">epeg_decode_bounds_set(Epeg_Image<sp/>*im,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h)</highlight></codeline>
<codeline lineno="219"><highlight class="normal">{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(im-&gt;pixels)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(w<sp/>&lt;<sp/>1)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(w<sp/>&gt;<sp/>im-&gt;in.w)<sp/>w<sp/>=<sp/>im-&gt;in.w;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(h<sp/>&lt;<sp/>1)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h<sp/>&gt;<sp/>im-&gt;in.h)<sp/>h<sp/>=<sp/>im-&gt;in.h;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/>im-&gt;out.w<sp/>=<sp/>w;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/>im-&gt;out.h<sp/>=<sp/>h;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(x<sp/>&lt;<sp/>0)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(y<sp/>&lt;<sp/>0)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/>im-&gt;out.x<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/>im-&gt;out.y<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="231"><highlight class="normal">}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243" refid="epeg_8c_1afe41e06c6667542ad4685730538e03f7" refkind="member"><highlight class="normal"><ref refid="epeg_8c_1afe41e06c6667542ad4685730538e03f7" kindref="member">epeg_decode_colorspace_set</ref>(Epeg_Image<sp/>*im,<sp/>Epeg_Colorspace<sp/>colorspace)</highlight></codeline>
<codeline lineno="244"><highlight class="normal">{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(im-&gt;pixels)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((colorspace<sp/>&lt;<sp/>EPEG_GRAY8)<sp/>||<sp/>(colorspace<sp/>&gt;<sp/>EPEG_ARGB32))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/>im-&gt;color_space<sp/>=<sp/>colorspace;</highlight></codeline>
<codeline lineno="248"><highlight class="normal">}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="271" refid="epeg_8c_1aa3e359181a6a48bd84708828364bf094" refkind="member"><highlight class="normal"><ref refid="epeg_8c_1aa3e359181a6a48bd84708828364bf094" kindref="member">epeg_pixels_get</ref>(Epeg_Image<sp/>*im,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,<sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h)</highlight></codeline>
<codeline lineno="272"><highlight class="normal">{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xx,<sp/>yy,<sp/>ww,<sp/>hh,<sp/>bpp,<sp/>ox,<sp/>oy,<sp/>ow,<sp/>oh,<sp/>iw,<sp/>ih;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!im-&gt;pixels)</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_epeg_decode(im)<sp/>!=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!im-&gt;pixels)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/>bpp<sp/>=<sp/>im-&gt;in.jinfo.output_components;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/>iw<sp/>=<sp/>im-&gt;out.w;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/>ih<sp/>=<sp/>im-&gt;out.h;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/>ow<sp/>=<sp/>w;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/>oh<sp/>=<sp/>h;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/>ox<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/>oy<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((x<sp/>+<sp/>ow)<sp/>&gt;<sp/>iw)<sp/>ow<sp/>=<sp/>iw<sp/>-<sp/>x;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((y<sp/>+<sp/>oh)<sp/>&gt;<sp/>ih)<sp/>oh<sp/>=<sp/>ih<sp/>-<sp/>y;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ow<sp/>&lt;<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oh<sp/>&lt;<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>ow<sp/>+=<sp/>x;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>ox<sp/>=<sp/>-x;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>oh<sp/>+=<sp/>y;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>oy<sp/>=<sp/>-y;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ow<sp/>&lt;<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oh<sp/>&lt;<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/>ww<sp/>=<sp/>x<sp/>+<sp/>ox<sp/>+<sp/>ow;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/>hh<sp/>=<sp/>y<sp/>+<sp/>oy<sp/>+<sp/>oh;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(im-&gt;color_space<sp/>==<sp/>EPEG_GRAY8)</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pix,<sp/>*p;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>pix<sp/>=<sp/>malloc(w<sp/>*<sp/>h<sp/>*<sp/>1);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pix)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(yy<sp/>=<sp/>y<sp/>+<sp/>oy;<sp/>yy<sp/>&lt;<sp/>hh;<sp/>yy++)</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>im-&gt;lines[yy]<sp/>+<sp/>((x<sp/>+<sp/>ox)<sp/>*<sp/>bpp);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>pix<sp/>+<sp/>((((yy<sp/>-<sp/>y)<sp/>*<sp/>w)<sp/>+<sp/>ox));</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(xx<sp/>=<sp/>x<sp/>+<sp/>ox;<sp/>xx<sp/>&lt;<sp/>ww;<sp/>xx++)</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p[0]<sp/>=<sp/>s[0];</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p++;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>+=<sp/>bpp;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pix;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(im-&gt;color_space<sp/>==<sp/>EPEG_YUV8)</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pix,<sp/>*p;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>pix<sp/>=<sp/>malloc(w<sp/>*<sp/>h<sp/>*<sp/>3);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pix)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(yy<sp/>=<sp/>y<sp/>+<sp/>oy;<sp/>yy<sp/>&lt;<sp/>hh;<sp/>yy++)</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>im-&gt;lines[yy]<sp/>+<sp/>((x<sp/>+<sp/>ox)<sp/>*<sp/>bpp);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>pix<sp/>+<sp/>((((yy<sp/>-<sp/>y)<sp/>*<sp/>w)<sp/>+<sp/>ox)<sp/>*<sp/>3);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(xx<sp/>=<sp/>x<sp/>+<sp/>ox;<sp/>xx<sp/>&lt;<sp/>ww;<sp/>xx++)</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p[0]<sp/>=<sp/>s[0];</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p[1]<sp/>=<sp/>s[1];</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p[2]<sp/>=<sp/>s[2];</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>+=<sp/>3;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>+=<sp/>bpp;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pix;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(im-&gt;color_space<sp/>==<sp/>EPEG_RGB8)</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pix,<sp/>*p;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/>pix<sp/>=<sp/>malloc(w<sp/>*<sp/>h<sp/>*<sp/>3);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pix)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(yy<sp/>=<sp/>y<sp/>+<sp/>oy;<sp/>yy<sp/>&lt;<sp/>hh;<sp/>yy++)</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>im-&gt;lines[yy]<sp/>+<sp/>((x<sp/>+<sp/>ox)<sp/>*<sp/>bpp);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>pix<sp/>+<sp/>((((yy<sp/>-<sp/>y)<sp/>*<sp/>w)<sp/>+<sp/>ox)<sp/>*<sp/>3);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(xx<sp/>=<sp/>x<sp/>+<sp/>ox;<sp/>xx<sp/>&lt;<sp/>ww;<sp/>xx++)</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p[0]<sp/>=<sp/>s[0];</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p[1]<sp/>=<sp/>s[1];</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p[2]<sp/>=<sp/>s[2];</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>+=<sp/>3;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>+=<sp/>bpp;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pix;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(im-&gt;color_space<sp/>==<sp/>EPEG_BGR8)</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pix,<sp/>*p;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>pix<sp/>=<sp/>malloc(w<sp/>*<sp/>h<sp/>*<sp/>3);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pix)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(yy<sp/>=<sp/>y<sp/>+<sp/>oy;<sp/>yy<sp/>&lt;<sp/>hh;<sp/>yy++)</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>im-&gt;lines[yy]<sp/>+<sp/>((x<sp/>+<sp/>ox)<sp/>*<sp/>bpp);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>pix<sp/>+<sp/>((((yy<sp/>-<sp/>y)<sp/>*<sp/>w)<sp/>+<sp/>ox)<sp/>*<sp/>3);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(xx<sp/>=<sp/>x<sp/>+<sp/>ox;<sp/>xx<sp/>&lt;<sp/>ww;<sp/>xx++)</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p[0]<sp/>=<sp/>s[2];</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p[1]<sp/>=<sp/>s[1];</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p[2]<sp/>=<sp/>s[0];</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>+=<sp/>3;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>+=<sp/>bpp;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pix;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(im-&gt;color_space<sp/>==<sp/>EPEG_RGBA8)</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pix,<sp/>*p;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/>pix<sp/>=<sp/>malloc(w<sp/>*<sp/>h<sp/>*<sp/>4);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pix)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(yy<sp/>=<sp/>y<sp/>+<sp/>oy;<sp/>yy<sp/>&lt;<sp/>hh;<sp/>yy++)</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>im-&gt;lines[yy]<sp/>+<sp/>((x<sp/>+<sp/>ox)<sp/>*<sp/>bpp);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>pix<sp/>+<sp/>((((yy<sp/>-<sp/>y)<sp/>*<sp/>w)<sp/>+<sp/>ox)<sp/>*<sp/>4);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(xx<sp/>=<sp/>x<sp/>+<sp/>ox;<sp/>xx<sp/>&lt;<sp/>ww;<sp/>xx++)</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p[0]<sp/>=<sp/>s[0];</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p[1]<sp/>=<sp/>s[1];</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p[2]<sp/>=<sp/>s[2];</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p[3]<sp/>=<sp/>0xff;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>+=<sp/>bpp;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pix;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(im-&gt;color_space<sp/>==<sp/>EPEG_BGRA8)</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pix,<sp/>*p;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/>pix<sp/>=<sp/>malloc(w<sp/>*<sp/>h<sp/>*<sp/>4);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pix)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(yy<sp/>=<sp/>y<sp/>+<sp/>oy;<sp/>yy<sp/>&lt;<sp/>hh;<sp/>yy++)</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>im-&gt;lines[yy]<sp/>+<sp/>((x<sp/>+<sp/>ox)<sp/>*<sp/>bpp);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>pix<sp/>+<sp/>((((yy<sp/>-<sp/>y)<sp/>*<sp/>w)<sp/>+<sp/>ox)<sp/>*<sp/>4);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(xx<sp/>=<sp/>x<sp/>+<sp/>ox;<sp/>xx<sp/>&lt;<sp/>ww;<sp/>xx++)</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p[0]<sp/>=<sp/>0xff;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p[1]<sp/>=<sp/>s[2];</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p[2]<sp/>=<sp/>s[1];</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p[3]<sp/>=<sp/>s[0];</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>+=<sp/>bpp;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pix;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(im-&gt;color_space<sp/>==<sp/>EPEG_ARGB32)</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*pix,<sp/>*p;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/>pix<sp/>=<sp/>malloc(w<sp/>*<sp/>h<sp/>*<sp/>4);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pix)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(yy<sp/>=<sp/>y<sp/>+<sp/>oy;<sp/>yy<sp/>&lt;<sp/>hh;<sp/>yy++)</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>im-&gt;lines[yy]<sp/>+<sp/>((x<sp/>+<sp/>ox)<sp/>*<sp/>bpp);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>pix<sp/>+<sp/>((((yy<sp/>-<sp/>y)<sp/>*<sp/>w)<sp/>+<sp/>ox));</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(xx<sp/>=<sp/>x<sp/>+<sp/>ox;<sp/>xx<sp/>&lt;<sp/>ww;<sp/>xx++)</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p[0]<sp/>=<sp/>0xff000000<sp/>|<sp/>(s[0]<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>(s[1]<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>(s[2]);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p++;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>+=<sp/>bpp;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pix;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(im-&gt;color_space<sp/>==<sp/>EPEG_CMYK)</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pix,<sp/>*p;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/>pix<sp/>=<sp/>malloc(w<sp/>*<sp/>h<sp/>*<sp/>4);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pix)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(yy<sp/>=<sp/>y<sp/>+<sp/>oy;<sp/>yy<sp/>&lt;<sp/>hh;<sp/>yy++)</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>im-&gt;lines[yy]<sp/>+<sp/>((x<sp/>+<sp/>ox)<sp/>*<sp/>bpp);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>pix<sp/>+<sp/>((((yy<sp/>-<sp/>y)<sp/>*<sp/>w)<sp/>+<sp/>ox)<sp/>*<sp/>4);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(xx<sp/>=<sp/>x<sp/>+<sp/>ox;<sp/>xx<sp/>&lt;<sp/>ww;<sp/>xx++)</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p[0]<sp/>=<sp/>s[0];</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p[1]<sp/>=<sp/>s[1];</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p[2]<sp/>=<sp/>s[2];</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p[3]<sp/>=<sp/>0xff;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>+=<sp/>bpp;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pix;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="493"><highlight class="normal">}</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="516" refid="epeg_8c_1a2dee06509f945c8e56efe30975e77806" refkind="member"><highlight class="normal"><ref refid="epeg_8c_1a2dee06509f945c8e56efe30975e77806" kindref="member">epeg_pixels_get_as_RGB8</ref>(Epeg_Image<sp/>*im,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,<sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h)</highlight></codeline>
<codeline lineno="517"><highlight class="normal">{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xx,<sp/>yy,<sp/>ww,<sp/>hh,<sp/>bpp,<sp/>ox,<sp/>oy,<sp/>ow,<sp/>oh,<sp/>iw,<sp/>ih;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!im-&gt;pixels)</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_epeg_decode(im)<sp/>!=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!im-&gt;pixels)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/>bpp<sp/>=<sp/>im-&gt;in.jinfo.output_components;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/>iw<sp/>=<sp/>im-&gt;out.w;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/>ih<sp/>=<sp/>im-&gt;out.h;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/>ow<sp/>=<sp/>w;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/>oh<sp/>=<sp/>h;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/>ox<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/>oy<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((x<sp/>+<sp/>ow)<sp/>&gt;<sp/>iw)<sp/>ow<sp/>=<sp/>iw<sp/>-<sp/>x;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((y<sp/>+<sp/>oh)<sp/>&gt;<sp/>ih)<sp/>oh<sp/>=<sp/>ih<sp/>-<sp/>y;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ow<sp/>&lt;<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oh<sp/>&lt;<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/>ow<sp/>+=<sp/>x;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/>ox<sp/>=<sp/>-x;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/>oh<sp/>+=<sp/>y;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/>oy<sp/>=<sp/>-y;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ow<sp/>&lt;<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oh<sp/>&lt;<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/>ww<sp/>=<sp/>x<sp/>+<sp/>ox<sp/>+<sp/>ow;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/>hh<sp/>=<sp/>y<sp/>+<sp/>oy<sp/>+<sp/>oh;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(im-&gt;color_space<sp/>==<sp/>EPEG_GRAY8)</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pix,<sp/>*p;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/>pix<sp/>=<sp/>malloc(w<sp/>*<sp/>h<sp/>*<sp/>3);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pix)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(yy<sp/>=<sp/>y<sp/>+<sp/>oy;<sp/>yy<sp/>&lt;<sp/>hh;<sp/>yy++)</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>im-&gt;lines[yy]<sp/>+<sp/>((x<sp/>+<sp/>ox)<sp/>*<sp/>bpp);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>pix<sp/>+<sp/>((((yy<sp/>-<sp/>y)<sp/>*<sp/>w)<sp/>+<sp/>ox)<sp/>*<sp/>3);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(xx<sp/>=<sp/>x<sp/>+<sp/>ox;<sp/>xx<sp/>&lt;<sp/>ww;<sp/>xx++)</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p[0]<sp/>=<sp/>s[0];</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p[1]<sp/>=<sp/>s[0];</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p[2]<sp/>=<sp/>s[0];</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>+=<sp/>3;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>+=<sp/>bpp;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pix;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(im-&gt;color_space<sp/>==<sp/>EPEG_RGB8)</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pix,<sp/>*p;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/>pix<sp/>=<sp/>malloc(w<sp/>*<sp/>h<sp/>*<sp/>3);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pix)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(yy<sp/>=<sp/>y<sp/>+<sp/>oy;<sp/>yy<sp/>&lt;<sp/>hh;<sp/>yy++)</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>im-&gt;lines[yy]<sp/>+<sp/>((x<sp/>+<sp/>ox)<sp/>*<sp/>bpp);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>pix<sp/>+<sp/>((((yy<sp/>-<sp/>y)<sp/>*<sp/>w)<sp/>+<sp/>ox)<sp/>*<sp/>3);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(xx<sp/>=<sp/>x<sp/>+<sp/>ox;<sp/>xx<sp/>&lt;<sp/>ww;<sp/>xx++)</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p[0]<sp/>=<sp/>s[0];</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p[1]<sp/>=<sp/>s[1];</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p[2]<sp/>=<sp/>s[2];</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>+=<sp/>3;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>+=<sp/>bpp;</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pix;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(im-&gt;color_space<sp/>==<sp/>EPEG_CMYK)</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pix,<sp/>*p;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/>pix<sp/>=<sp/>malloc(w<sp/>*<sp/>h<sp/>*<sp/>3);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pix)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(yy<sp/>=<sp/>y<sp/>+<sp/>oy;<sp/>yy<sp/>&lt;<sp/>hh;<sp/>yy++)</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>im-&gt;lines[yy]<sp/>+<sp/>((x<sp/>+<sp/>ox)<sp/>*<sp/>bpp);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>pix<sp/>+<sp/>((((yy<sp/>-<sp/>y)<sp/>*<sp/>w)<sp/>+<sp/>ox)<sp/>*<sp/>3);</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(xx<sp/>=<sp/>x<sp/>+<sp/>ox;<sp/>xx<sp/>&lt;<sp/>ww;<sp/>xx++)</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p[0]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)(MIN(255,<sp/>(s[0]<sp/>*<sp/>s[3])<sp/>/<sp/>255));</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p[1]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)(MIN(255,<sp/>(s[1]<sp/>*<sp/>s[3])<sp/>/<sp/>255));</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p[2]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)(MIN(255,<sp/>(s[2]<sp/>*<sp/>s[3])<sp/>/<sp/>255));</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>+=<sp/>3;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>+=<sp/>bpp;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pix;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="624"><highlight class="normal">}</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637" refid="epeg_8c_1adf9efc5d877afebda99aba8d5c2bbb0f" refkind="member"><highlight class="normal"><ref refid="epeg_8c_1adf9efc5d877afebda99aba8d5c2bbb0f" kindref="member">epeg_pixels_free</ref>(Epeg_Image<sp/>*im,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data)</highlight></codeline>
<codeline lineno="638"><highlight class="normal">{</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/>free((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)data);</highlight></codeline>
<codeline lineno="640"><highlight class="normal">}</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="653" refid="epeg_8c_1ab4aea6482399797f2f4ada02e9962b7f" refkind="member"><highlight class="normal"><ref refid="epeg_8c_1ab4aea6482399797f2f4ada02e9962b7f" kindref="member">epeg_comment_get</ref>(Epeg_Image<sp/>*im)</highlight></codeline>
<codeline lineno="654"><highlight class="normal">{</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>im-&gt;in.comment;</highlight></codeline>
<codeline lineno="656"><highlight class="normal">}</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669" refid="epeg_8c_1a28e230b7b3bb05b8a470c80c45100c52" refkind="member"><highlight class="normal"><ref refid="epeg_8c_1a28e230b7b3bb05b8a470c80c45100c52" kindref="member">epeg_thumbnail_comments_get</ref>(Epeg_Image<sp/>*im,<sp/>Epeg_Thumbnail_Info<sp/>*info)</highlight></codeline>
<codeline lineno="670"><highlight class="normal">{</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!info)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/>info-&gt;uri<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>im-&gt;in.thumb_info.uri;</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/>info-&gt;mtime<sp/><sp/><sp/><sp/>=<sp/>im-&gt;in.thumb_info.mtime;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/>info-&gt;w<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>im-&gt;in.thumb_info.w;</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/>info-&gt;h<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>im-&gt;in.thumb_info.h;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/>info-&gt;mimetype<sp/>=<sp/>im-&gt;in.thumb_info.mime;</highlight></codeline>
<codeline lineno="677"><highlight class="normal">}</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692" refid="epeg_8c_1ab96605b1c21ec8d791df705a5117233c" refkind="member"><highlight class="normal"><ref refid="epeg_8c_1ab96605b1c21ec8d791df705a5117233c" kindref="member">epeg_comment_set</ref>(Epeg_Image<sp/>*im,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*comment)</highlight></codeline>
<codeline lineno="693"><highlight class="normal">{</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(im-&gt;out.comment)<sp/>free(im-&gt;out.comment);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!comment)<sp/>im-&gt;out.comment<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>im-&gt;out.comment<sp/>=<sp/>strdup(comment);</highlight></codeline>
<codeline lineno="697"><highlight class="normal">}</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713" refid="epeg_8c_1ad0c11f61561f622ca4097c47c75129bc" refkind="member"><highlight class="normal"><ref refid="epeg_8c_1ad0c11f61561f622ca4097c47c75129bc" kindref="member">epeg_quality_set</ref>(Epeg_Image<sp/>*im,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>quality)</highlight></codeline>
<codeline lineno="714"><highlight class="normal">{</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(quality<sp/>&lt;<sp/>0)<sp/><sp/><sp/>quality<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(quality<sp/>&gt;<sp/>100)<sp/>quality<sp/>=<sp/>100;</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/>im-&gt;out.quality<sp/>=<sp/>quality;</highlight></codeline>
<codeline lineno="718"><highlight class="normal">}</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="730" refid="epeg_8c_1a5cfe689f77dbe7b120317a195585ee51" refkind="member"><highlight class="normal"><ref refid="epeg_8c_1a5cfe689f77dbe7b120317a195585ee51" kindref="member">epeg_thumbnail_comments_enable</ref>(Epeg_Image<sp/>*im,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>onoff)</highlight></codeline>
<codeline lineno="731"><highlight class="normal">{</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/>im-&gt;out.thumbnail_info<sp/>=<sp/>onoff;</highlight></codeline>
<codeline lineno="733"><highlight class="normal">}</highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746" refid="epeg_8c_1a4aa4c7bbf3edf1f24603d3b4dad684b4" refkind="member"><highlight class="normal"><ref refid="epeg_8c_1a4aa4c7bbf3edf1f24603d3b4dad684b4" kindref="member">epeg_file_output_set</ref>(Epeg_Image<sp/>*im,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file)</highlight></codeline>
<codeline lineno="747"><highlight class="normal">{</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(im-&gt;out.file)<sp/>free(im-&gt;out.file);</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!file)<sp/>im-&gt;out.file<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>im-&gt;out.file<sp/>=<sp/>strdup(file);</highlight></codeline>
<codeline lineno="751"><highlight class="normal">}</highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768" refid="epeg_8c_1ae0e91c160074e6d96b7e366fb0eb6ec8" refkind="member"><highlight class="normal"><ref refid="epeg_8c_1ae0e91c160074e6d96b7e366fb0eb6ec8" kindref="member">epeg_memory_output_set</ref>(Epeg_Image<sp/>*im,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*size)</highlight></codeline>
<codeline lineno="769"><highlight class="normal">{</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/>im-&gt;out.mem.data<sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/>im-&gt;out.mem.size<sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="772"><highlight class="normal">}</highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="784" refid="epeg_8c_1a12a018084510ebdc0e627f56305fea79" refkind="member"><highlight class="normal"><ref refid="epeg_8c_1a12a018084510ebdc0e627f56305fea79" kindref="member">epeg_encode</ref>(Epeg_Image<sp/>*im)</highlight></codeline>
<codeline lineno="785"><highlight class="normal">{</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_epeg_decode(im)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_epeg_scale(im)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_epeg_encode(im)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="793"><highlight class="normal">}</highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="802" refid="epeg_8c_1a327dab144744ba5f1892643d627e6df0" refkind="member"><highlight class="normal"><ref refid="epeg_8c_1a327dab144744ba5f1892643d627e6df0" kindref="member">epeg_trim</ref>(Epeg_Image<sp/>*im)</highlight></codeline>
<codeline lineno="803"><highlight class="normal">{</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_epeg_decode_for_trim(im)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_epeg_trim(im)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_epeg_encode(im)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="811"><highlight class="normal">}</highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="823" refid="epeg_8c_1a8faf0f0fab47ac97b86ee7e00e1bee7c" refkind="member"><highlight class="normal"><ref refid="epeg_8c_1a8faf0f0fab47ac97b86ee7e00e1bee7c" kindref="member">epeg_close</ref>(Epeg_Image<sp/>*im)</highlight></codeline>
<codeline lineno="824"><highlight class="normal">{</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(im-&gt;pixels)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(im-&gt;pixels);</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(im-&gt;lines)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(im-&gt;lines);</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(im-&gt;in.file)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(im-&gt;in.file);</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(im-&gt;in.f)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jpeg_destroy_decompress(&amp;(im-&gt;in.jinfo));</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(im-&gt;in.f)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(im-&gt;in.f);</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(im-&gt;in.comment)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(im-&gt;in.comment);</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(im-&gt;in.thumb_info.uri)<sp/><sp/>free(im-&gt;in.thumb_info.uri);</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(im-&gt;in.thumb_info.mime)<sp/>free(im-&gt;in.thumb_info.mime);</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(im-&gt;out.file)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(im-&gt;out.file);</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(im-&gt;out.f)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jpeg_destroy_compress(&amp;(im-&gt;out.jinfo));</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(im-&gt;out.f)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(im-&gt;out.f);</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(im-&gt;out.comment)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(im-&gt;out.comment);</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/>free(im);</highlight></codeline>
<codeline lineno="838"><highlight class="normal">}</highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Epeg_Image<sp/>*</highlight></codeline>
<codeline lineno="841"><highlight class="normal">_epeg_open_header(Epeg_Image<sp/>*im)</highlight></codeline>
<codeline lineno="842"><highlight class="normal">{</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">jpeg_marker_struct<sp/>*m;</highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/>im-&gt;in.jinfo.err<sp/>=<sp/>jpeg_std_error(&amp;(im-&gt;jerr.pub));</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/>im-&gt;jerr.pub.error_exit<sp/>=<sp/>_epeg_fatal_error_handler;</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(setjmp(im-&gt;jerr.setjmp_buffer))</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/>error:</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><ref refid="epeg_8c_1a8faf0f0fab47ac97b86ee7e00e1bee7c" kindref="member">epeg_close</ref>(im);</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/>im<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/>jpeg_create_decompress(&amp;(im-&gt;in.jinfo));</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/>jpeg_save_markers(&amp;(im-&gt;in.jinfo),<sp/>JPEG_APP0<sp/>+<sp/>7,<sp/>1024);</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/>jpeg_save_markers(&amp;(im-&gt;in.jinfo),<sp/>JPEG_COM,<sp/><sp/><sp/><sp/><sp/><sp/>65535);</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/>jpeg_stdio_src(&amp;(im-&gt;in.jinfo),<sp/>im-&gt;in.f);</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/>jpeg_read_header(&amp;(im-&gt;in.jinfo),<sp/>TRUE);</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/>im-&gt;in.w<sp/>=<sp/>im-&gt;in.jinfo.image_width;</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/>im-&gt;in.h<sp/>=<sp/>im-&gt;in.jinfo.image_height;</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(im-&gt;in.w<sp/>&lt;=<sp/>1)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(im-&gt;in.h<sp/>&lt;=<sp/>1)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/>im-&gt;out.w<sp/>=<sp/>im-&gt;in.w;</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/>im-&gt;out.h<sp/>=<sp/>im-&gt;in.h;</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/>im-&gt;color_space<sp/>=<sp/>((im-&gt;in.color_space<sp/>=<sp/>im-&gt;in.jinfo.out_color_space)<sp/>==<sp/>JCS_GRAYSCALE)<sp/>?<sp/>EPEG_GRAY8<sp/>:<sp/>EPEG_RGB8;</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(im-&gt;in.color_space<sp/>==<sp/>JCS_CMYK)<sp/>im-&gt;color_space<sp/>=<sp/>EPEG_CMYK;</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(m<sp/>=<sp/>im-&gt;in.jinfo.marker_list;<sp/>m;<sp/>m<sp/>=<sp/>m-&gt;next)</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;marker<sp/>==<sp/>JPEG_COM)</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(im-&gt;in.comment)<sp/>free(im-&gt;in.comment);</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>im-&gt;in.comment<sp/>=<sp/>malloc(m-&gt;data_length<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(im-&gt;in.comment)</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(im-&gt;in.comment,<sp/>m-&gt;data,<sp/>m-&gt;data_length);</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>im-&gt;in.comment[m-&gt;data_length]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;marker<sp/>==<sp/>(JPEG_APP0<sp/>+<sp/>7))</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((m-&gt;data_length<sp/>&gt;<sp/>7)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>(!strncmp((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)m-&gt;data,<sp/></highlight><highlight class="stringliteral">&quot;Thumb::&quot;</highlight><highlight class="normal">,<sp/>7)))</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p,<sp/>*p2;</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>malloc(m-&gt;data_length<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p)</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(p,<sp/>m-&gt;data,<sp/>m-&gt;data_length);</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[m-&gt;data_length]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p2<sp/>=<sp/>strchr(p,<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p2)</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p2[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(p,<sp/></highlight><highlight class="stringliteral">&quot;Thumb::URI&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>im-&gt;in.thumb_info.uri<sp/>=<sp/>strdup(p2<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(p,<sp/></highlight><highlight class="stringliteral">&quot;Thumb::MTime&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sscanf(p2<sp/>+<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;%llu&quot;</highlight><highlight class="normal">,<sp/>&amp;(im-&gt;in.thumb_info.mtime));</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(p,<sp/></highlight><highlight class="stringliteral">&quot;Thumb::Image::Width&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>im-&gt;in.thumb_info.w<sp/>=<sp/>atoi(p2<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(p,<sp/></highlight><highlight class="stringliteral">&quot;Thumb::Image::Height&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>im-&gt;in.thumb_info.h<sp/>=<sp/>atoi(p2<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(p,<sp/></highlight><highlight class="stringliteral">&quot;Thumb::Mimetype&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>im-&gt;in.thumb_info.mime<sp/>=<sp/>strdup(p2<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(p);</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>im;</highlight></codeline>
<codeline lineno="918"><highlight class="normal">}</highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal">_epeg_decode(Epeg_Image<sp/>*im)</highlight></codeline>
<codeline lineno="922"><highlight class="normal">{</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>scale,<sp/>scalew,<sp/>scaleh,<sp/>y;</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(im-&gt;pixels)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/>scalew<sp/>=<sp/>im-&gt;in.w<sp/>/<sp/>im-&gt;out.w;</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/>scaleh<sp/>=<sp/>im-&gt;in.h<sp/>/<sp/>im-&gt;out.h;</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/>scale<sp/>=<sp/>scalew;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scaleh<sp/>&lt;<sp/>scalew)<sp/>scale<sp/>=<sp/>scaleh;</highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(scale<sp/>&gt;<sp/>8)<sp/>scale<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scale<sp/>&lt;<sp/>1)<sp/>scale<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/>im-&gt;in.jinfo.scale_num<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/>im-&gt;in.jinfo.scale_denom<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>scale;</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/>im-&gt;in.jinfo.do_fancy_upsampling<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/>im-&gt;in.jinfo.do_block_smoothing<sp/><sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/>im-&gt;in.jinfo.dct_method<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>JDCT_IFAST;</highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(im-&gt;color_space)</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EPEG_GRAY8:</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/>im-&gt;in.jinfo.out_color_space<sp/>=<sp/>JCS_GRAYSCALE;</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/>im-&gt;in.jinfo.output_components<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EPEG_YUV8:</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/>im-&gt;in.jinfo.out_color_space<sp/>=<sp/>JCS_YCbCr;</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EPEG_RGB8:</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EPEG_BGR8:</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EPEG_RGBA8:</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EPEG_BGRA8:</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EPEG_ARGB32:</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/>im-&gt;in.jinfo.out_color_space<sp/>=<sp/>JCS_RGB;</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EPEG_CMYK:</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/>im-&gt;in.jinfo.out_color_space<sp/>=<sp/>JCS_CMYK;</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/>im-&gt;in.jinfo.output_components<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/>im-&gt;out.jinfo.err<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>jpeg_std_error(&amp;(im-&gt;jerr.pub));</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/>im-&gt;jerr.pub.error_exit<sp/><sp/><sp/><sp/>=<sp/>_epeg_fatal_error_handler;</highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(setjmp(im-&gt;jerr.setjmp_buffer))</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><ref refid="epeg_8c_1a8faf0f0fab47ac97b86ee7e00e1bee7c" kindref="member">epeg_close</ref>(im);</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/>jpeg_calc_output_dimensions(&amp;(im-&gt;in.jinfo));</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/>im-&gt;pixels<sp/>=<sp/>malloc(im-&gt;in.jinfo.output_width<sp/>*<sp/>im-&gt;in.jinfo.output_height<sp/>*<sp/>im-&gt;in.jinfo.output_components);</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!im-&gt;pixels)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/>im-&gt;lines<sp/>=<sp/>malloc(im-&gt;in.jinfo.output_height<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*));</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!im-&gt;lines)</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/>free(im-&gt;pixels);</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/>im-&gt;pixels<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/>jpeg_start_decompress(&amp;(im-&gt;in.jinfo));</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/>im-&gt;in.jinfo.output_height;<sp/>y++)</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>im-&gt;lines[y]<sp/>=<sp/>im-&gt;pixels<sp/>+<sp/>(y<sp/>*<sp/>im-&gt;in.jinfo.output_components<sp/>*<sp/>im-&gt;in.jinfo.output_width);</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(im-&gt;in.jinfo.output_scanline<sp/>&lt;<sp/>im-&gt;in.jinfo.output_height)</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>jpeg_read_scanlines(&amp;(im-&gt;in.jinfo),<sp/></highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;(im-&gt;lines[im-&gt;in.jinfo.output_scanline]),<sp/></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>im-&gt;in.jinfo.rec_outbuf_height);</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/>jpeg_finish_decompress(&amp;(im-&gt;in.jinfo));</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1005"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal">_epeg_scale(Epeg_Image<sp/>*im)</highlight></codeline>
<codeline lineno="1009"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dst,<sp/>*row,<sp/>*src;</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x,<sp/>y,<sp/>w,<sp/>h,<sp/>i;</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((im-&gt;in.w<sp/>==<sp/>im-&gt;out.w)<sp/>&amp;&amp;<sp/>(im-&gt;in.h<sp/>==<sp/>im-&gt;out.h))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(im-&gt;scaled)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/>im-&gt;scaled<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/>w<sp/>=<sp/>im-&gt;out.w;</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/>h<sp/>=<sp/>im-&gt;out.h;</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/>h;<sp/>y++)</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/>row<sp/>=<sp/>im-&gt;pixels<sp/>+<sp/>(((y<sp/>*<sp/>im-&gt;in.jinfo.output_height)<sp/>/<sp/>h)<sp/>*<sp/>im-&gt;in.jinfo.output_components<sp/>*<sp/>im-&gt;in.jinfo.output_width);</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/>dst<sp/>=<sp/>im-&gt;pixels<sp/>+<sp/>(y<sp/>*<sp/>im-&gt;in.jinfo.output_components<sp/>*<sp/>im-&gt;in.jinfo.output_width);</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>im-&gt;out.w;<sp/>x++)</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>src<sp/>=<sp/>row<sp/>+<sp/>(((x<sp/>*<sp/>im-&gt;in.jinfo.output_width)<sp/>/<sp/>w)<sp/>*<sp/>im-&gt;in.jinfo.output_components);</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>im-&gt;in.jinfo.output_components;<sp/>i++)</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst[i]<sp/>=<sp/>src[i];</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst<sp/>+=<sp/>im-&gt;in.jinfo.output_components;</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1035"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal">_epeg_decode_for_trim(Epeg_Image<sp/>*im)</highlight></codeline>
<codeline lineno="1039"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>y;</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(im-&gt;pixels)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/>im-&gt;in.jinfo.scale_num<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/>im-&gt;in.jinfo.scale_denom<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/>im-&gt;in.jinfo.do_fancy_upsampling<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/>im-&gt;in.jinfo.do_block_smoothing<sp/><sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/>im-&gt;in.jinfo.dct_method<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>JDCT_ISLOW;</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(im-&gt;color_space)</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EPEG_GRAY8:</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/>im-&gt;in.jinfo.out_color_space<sp/>=<sp/>JCS_GRAYSCALE;</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/>im-&gt;in.jinfo.output_components<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EPEG_YUV8:</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/>im-&gt;in.jinfo.out_color_space<sp/>=<sp/>JCS_YCbCr;</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EPEG_RGB8:</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EPEG_BGR8:</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EPEG_RGBA8:</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EPEG_BGRA8:</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EPEG_ARGB32:</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/>im-&gt;in.jinfo.out_color_space<sp/>=<sp/>JCS_RGB;</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EPEG_CMYK:</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/>im-&gt;in.jinfo.out_color_space<sp/>=<sp/>JCS_CMYK;</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/>im-&gt;in.jinfo.output_components<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/>im-&gt;out.jinfo.err<sp/>=<sp/>jpeg_std_error(&amp;(im-&gt;jerr.pub));</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/>im-&gt;jerr.pub.error_exit<sp/>=<sp/>_epeg_fatal_error_handler;</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(setjmp(im-&gt;jerr.setjmp_buffer))</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/>jpeg_calc_output_dimensions(&amp;(im-&gt;in.jinfo));</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/>im-&gt;pixels<sp/>=<sp/>malloc(im-&gt;in.jinfo.output_width<sp/>*<sp/>im-&gt;in.jinfo.output_height<sp/>*<sp/>im-&gt;in.jinfo.output_components);</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!im-&gt;pixels)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/>im-&gt;lines<sp/>=<sp/>malloc(im-&gt;in.jinfo.output_height<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*));</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!im-&gt;lines)</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/>free(im-&gt;pixels);</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/>im-&gt;pixels<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/>jpeg_start_decompress(&amp;(im-&gt;in.jinfo));</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/>im-&gt;in.jinfo.output_height;<sp/>y++)</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>im-&gt;lines[y]<sp/>=<sp/>im-&gt;pixels<sp/>+<sp/>(y<sp/>*<sp/>im-&gt;in.jinfo.output_components<sp/>*<sp/>im-&gt;in.jinfo.output_width);</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(im-&gt;in.jinfo.output_scanline<sp/>&lt;<sp/>im-&gt;in.jinfo.output_height)</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>jpeg_read_scanlines(&amp;(im-&gt;in.jinfo),<sp/></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;(im-&gt;lines[im-&gt;in.jinfo.output_scanline]),<sp/></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>im-&gt;in.jinfo.rec_outbuf_height);</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/>jpeg_finish_decompress(&amp;(im-&gt;in.jinfo));</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal">_epeg_trim(Epeg_Image<sp/>*im)</highlight></codeline>
<codeline lineno="1114"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y,<sp/>a,<sp/>b,<sp/>w,<sp/>h;</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((im-&gt;in.w<sp/>==<sp/>im-&gt;out.w)<sp/>&amp;&amp;<sp/>(im-&gt;in.h<sp/>==<sp/>im-&gt;out.h))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(im-&gt;scaled)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/>im-&gt;scaled<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/>w<sp/>=<sp/>im-&gt;out.w;</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/>h<sp/>=<sp/>im-&gt;out.h;</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/>a<sp/>=<sp/>im-&gt;out.x;</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/>b<sp/>=<sp/>im-&gt;out.y;</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/>h;<sp/>y++)</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>im-&gt;lines[y]<sp/>=<sp/>im-&gt;pixels<sp/>+<sp/>((y+b)<sp/>*<sp/>im-&gt;in.jinfo.output_components<sp/>*<sp/>im-&gt;in.jinfo.output_width)<sp/>+<sp/>(a<sp/>*<sp/>im-&gt;in.jinfo.output_components);</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal">_epeg_encode(Epeg_Image<sp/>*im)</highlight></codeline>
<codeline lineno="1134"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/>*data<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(im-&gt;out.f)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(im-&gt;out.file)</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>im-&gt;out.f<sp/>=<sp/>fopen(im-&gt;out.file,<sp/></highlight><highlight class="stringliteral">&quot;wb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>im-&gt;out.f<sp/>=<sp/>_epeg_memfile_write_open(&amp;data,<sp/>&amp;size);</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!im-&gt;out.f)</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/>im-&gt;error<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/>im-&gt;out.jinfo.err<sp/>=<sp/>jpeg_std_error(&amp;(im-&gt;jerr.pub));</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/>im-&gt;jerr.pub.error_exit<sp/>=<sp/>_epeg_fatal_error_handler;</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(setjmp(im-&gt;jerr.setjmp_buffer))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/>jpeg_create_compress(&amp;(im-&gt;out.jinfo));</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/>jpeg_stdio_dest(&amp;(im-&gt;out.jinfo),<sp/>im-&gt;out.f);</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/>im-&gt;out.jinfo.image_width<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>im-&gt;out.w;</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/>im-&gt;out.jinfo.image_height<sp/><sp/><sp/><sp/><sp/>=<sp/>im-&gt;out.h;</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/>im-&gt;out.jinfo.input_components<sp/>=<sp/>im-&gt;in.jinfo.output_components;</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/>im-&gt;out.jinfo.in_color_space<sp/><sp/><sp/>=<sp/>im-&gt;in.jinfo.out_color_space;</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/>im-&gt;out.jinfo.dct_method<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>JDCT_IFAST;</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/>im-&gt;out.jinfo.dct_method<sp/><sp/><sp/>=<sp/>im-&gt;in.jinfo.dct_method;</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/>jpeg_set_defaults(&amp;(im-&gt;out.jinfo));</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/>jpeg_set_quality(&amp;(im-&gt;out.jinfo),<sp/>im-&gt;out.quality,<sp/>TRUE);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(im-&gt;out.quality<sp/>&gt;=<sp/>90)</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/>im-&gt;out.jinfo.comp_info[0].h_samp_factor<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/>im-&gt;out.jinfo.comp_info[0].v_samp_factor<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/>im-&gt;out.jinfo.comp_info[1].h_samp_factor<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/>im-&gt;out.jinfo.comp_info[1].v_samp_factor<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/>im-&gt;out.jinfo.comp_info[2].h_samp_factor<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/>im-&gt;out.jinfo.comp_info[2].v_samp_factor<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/>jpeg_start_compress(&amp;(im-&gt;out.jinfo),<sp/>TRUE);</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"></highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(im-&gt;out.comment)</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>jpeg_write_marker(&amp;(im-&gt;out.jinfo),<sp/>JPEG_COM,<sp/>im-&gt;out.comment,<sp/>strlen(im-&gt;out.comment));</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(im-&gt;out.thumbnail_info)</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[8192];</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(im-&gt;in.file)</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>snprintf(buf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buf),<sp/></highlight><highlight class="stringliteral">&quot;Thumb::URI\nfile://%s&quot;</highlight><highlight class="normal">,<sp/>im-&gt;in.file);</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jpeg_write_marker(&amp;(im-&gt;out.jinfo),<sp/>JPEG_APP0<sp/>+<sp/>7,<sp/>buf,<sp/>strlen(buf));</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>snprintf(buf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buf),<sp/></highlight><highlight class="stringliteral">&quot;Thumb::MTime\n%llu&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)im-&gt;stat_info.st_mtime);</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/>jpeg_write_marker(&amp;(im-&gt;out.jinfo),<sp/>JPEG_APP0<sp/>+<sp/>7,<sp/>buf,<sp/>strlen(buf));</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/>snprintf(buf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buf),<sp/></highlight><highlight class="stringliteral">&quot;Thumb::Image::Width\n%i&quot;</highlight><highlight class="normal">,<sp/>im-&gt;in.w);</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/>jpeg_write_marker(&amp;(im-&gt;out.jinfo),<sp/>JPEG_APP0<sp/>+<sp/>7,<sp/>buf,<sp/>strlen(buf));</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/>snprintf(buf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buf),<sp/></highlight><highlight class="stringliteral">&quot;Thumb::Image::Height\n%i&quot;</highlight><highlight class="normal">,<sp/>im-&gt;in.h);</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/>jpeg_write_marker(&amp;(im-&gt;out.jinfo),<sp/>JPEG_APP0<sp/>+<sp/>7,<sp/>buf,<sp/>strlen(buf));</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/>snprintf(buf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buf),<sp/></highlight><highlight class="stringliteral">&quot;Thumb::Mimetype\nimage/jpeg&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/>jpeg_write_marker(&amp;(im-&gt;out.jinfo),<sp/>JPEG_APP0<sp/>+<sp/>7,<sp/>buf,<sp/>strlen(buf));</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(im-&gt;out.jinfo.next_scanline<sp/>&lt;<sp/>im-&gt;out.h)</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>jpeg_write_scanlines(&amp;(im-&gt;out.jinfo),<sp/>&amp;(im-&gt;lines[im-&gt;out.jinfo.next_scanline]),<sp/>1);</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/>jpeg_finish_compress(&amp;(im-&gt;out.jinfo));</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(im-&gt;in.f)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jpeg_destroy_decompress(&amp;(im-&gt;in.jinfo));</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((im-&gt;in.f)<sp/>&amp;&amp;<sp/>(im-&gt;in.file))<sp/><sp/><sp/><sp/>fclose(im-&gt;in.f);</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((im-&gt;in.f)<sp/>&amp;&amp;<sp/>(!im-&gt;in.file))<sp/><sp/><sp/>_epeg_memfile_read_close(im-&gt;in.f);</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(im-&gt;out.f)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jpeg_destroy_compress(&amp;(im-&gt;out.jinfo));</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((im-&gt;out.f)<sp/>&amp;&amp;<sp/>(im-&gt;out.file))<sp/><sp/>fclose(im-&gt;out.f);</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((im-&gt;out.f)<sp/>&amp;&amp;<sp/>(!im-&gt;out.file))<sp/>_epeg_memfile_write_close(im-&gt;out.f);</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/>im-&gt;in.f<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/>im-&gt;out.f<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(im-&gt;out.mem.data)<sp/>*(im-&gt;out.mem.data)<sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(im-&gt;out.mem.size)<sp/>*(im-&gt;out.mem.size)<sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1217"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"></highlight></codeline>
<codeline lineno="1219"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="1220"><highlight class="normal">_epeg_fatal_error_handler(j_common_ptr<sp/>cinfo)</highlight></codeline>
<codeline lineno="1221"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/>emptr<sp/>errmgr;</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/>errmgr<sp/>=<sp/>(emptr)cinfo-&gt;err;</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/>longjmp(errmgr-&gt;setjmp_buffer,<sp/>1);</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1227"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Epeg.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;epeg_private.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal">FILE<sp/>*</highlight></codeline>
<codeline lineno="1232"><highlight class="normal">_epeg_memfile_read_open(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)</highlight></codeline>
<codeline lineno="1233"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_FMEMOPEN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(FILE<sp/>*)fmemopen(data,<sp/>size,<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/>FILE<sp/>*f;</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/>f<sp/>=<sp/>tmpfile();</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!f)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/>fwrite(data,<sp/>size,<sp/>1,<sp/>f);</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/>rewind(f);</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f;</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1248"><highlight class="normal">_epeg_memfile_read_close(FILE<sp/>*f)</highlight></codeline>
<codeline lineno="1249"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_FMEMOPEN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/>fclose(f);</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/>fclose(f);</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"></highlight></codeline>
<codeline lineno="1258"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_Eet_Memfile_Write_Info<sp/>Eet_Memfile_Write_Info;</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_Eet_Memfile_Write_Info</highlight></codeline>
<codeline lineno="1260"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/>FILE<sp/>*f;</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**data;</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*size;</highlight></codeline>
<codeline lineno="1264"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"></highlight></codeline>
<codeline lineno="1266"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_epeg_memfile_info_alloc_num<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_epeg_memfile_info_num<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Eet_Memfile_Write_Info<sp/>*_epeg_memfile_info<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight></codeline>
<codeline lineno="1270"><highlight class="normal">FILE<sp/>*</highlight></codeline>
<codeline lineno="1271"><highlight class="normal">_epeg_memfile_write_open(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*size)</highlight></codeline>
<codeline lineno="1272"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_OPEN_MEMSTREAM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>open_memstream((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)data,<sp/>size);</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/>FILE<sp/>*f;</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/>_epeg_memfile_info_num++;</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_epeg_memfile_info_num<sp/>&gt;<sp/>_epeg_memfile_info_alloc_num)</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/>Eet_Memfile_Write_Info<sp/>*tmp;</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/>_epeg_memfile_info_alloc_num<sp/>+=<sp/>16;</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/>tmp<sp/>=<sp/>realloc(_epeg_memfile_info,<sp/></highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_epeg_memfile_info_alloc_num<sp/>*<sp/></highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Eet_Memfile_Write_Info));</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!tmp)</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_epeg_memfile_info_alloc_num<sp/>-=<sp/>16;</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_epeg_memfile_info_num--;</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/>_epeg_memfile_info<sp/>=<sp/>tmp;</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/>f<sp/>=<sp/>tmpfile();</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!f)<sp/></highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/>_epeg_memfile_info_num--;</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/>_epeg_memfile_info[_epeg_memfile_info_num<sp/>-<sp/>1].f<sp/>=<sp/>f;</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/>_epeg_memfile_info[_epeg_memfile_info_num<sp/>-<sp/>1].data<sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/>_epeg_memfile_info[_epeg_memfile_info_num<sp/>-<sp/>1].size<sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f;</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1306"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"></highlight></codeline>
<codeline lineno="1308"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1309"><highlight class="normal">_epeg_memfile_write_close(FILE<sp/>*f)</highlight></codeline>
<codeline lineno="1310"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_OPEN_MEMSTREAM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/>fclose(f);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>_epeg_memfile_info_num;<sp/>i++)</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_epeg_memfile_info[i].f<sp/>==<sp/>f)</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"></highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fseek(f,<sp/>0,<sp/>SEEK_END);</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*(_epeg_memfile_info[i].size))<sp/>=<sp/>ftell(f);</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rewind(f);</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*(_epeg_memfile_info[i].data))<sp/>=<sp/>malloc(*(_epeg_memfile_info[i].size));</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(*(_epeg_memfile_info[i].data)))</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fclose(f);</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*(_epeg_memfile_info[i].size))<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fread((*(_epeg_memfile_info[i].data)),<sp/>(*(_epeg_memfile_info[i].size)),<sp/>1,<sp/>f);</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>i<sp/>+<sp/>1;<sp/>j<sp/>&lt;<sp/>_epeg_memfile_info_num;<sp/>j++)</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_epeg_memfile_info[j<sp/>-<sp/>1]<sp/>=<sp/>_epeg_memfile_info[j];</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_epeg_memfile_info_num--;</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(f);</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/>fclose(f);</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1342"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/ericgallager/epeg/epeg.c"/>
  </compounddef>
</doxygen>
